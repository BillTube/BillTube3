BTFW.define("feature:channelThemeAdmin",[],async () =>{const $ = (sel,root = document) => root.querySelector(sel);const $$ = (sel,root = document) => Array.from(root.querySelectorAll(sel));const JS_BLOCK_START = " const JS_BLOCK_END = " const CSS_BLOCK_START = "";const CSS_BLOCK_END = "";const JS_FIELD_SELECTORS = [ "#cs-jstext","#chanjs","#channel-js","#channeljs","#customjs","#customJS","textarea[name=chanjs]","textarea[name=channeljs]","textarea[data-setting='customJS']","textarea[data-setting='chanjs']","textarea[name='js']",".channel-js-field" ];const CSS_FIELD_SELECTORS = [ "#cs-csstext","#chancss","#channel-css","#channelcss","#customcss","#customCSS","textarea[name=chancss]","textarea[name=channelcss]","textarea[data-setting='customCSS']","textarea[data-setting='chancss']","textarea[name='css']",".channel-css-field" ];const DEFAULT_CONFIG ={version:6,tint:"midnight",colors:{background:"#0d0d0d",surface:"#090d15",panel:"#191b24",text:"#e8ecfb",chatText:"#d4defd",accent:"#191434"},slider:{enabled:false,feedUrl:""},typography:{preset:"inter",customFamily:""},integrations:{enabled:true,tmdb:{apiKey:""}},resources:{scripts:[],styles:[],modules:[]},branding:{headerName:"CyTube",faviconUrl:"",posterUrl:""}};const TINT_PRESETS ={midnight:{name:"Midnight Pulse",colors:{background:"#0d0d0d",surface:"#090d15",panel:"#191b24",text:"#e8ecfb",chatText:"#d4defd",accent:"#191434"}},aurora:{name:"Aurora Bloom",colors:{background:"#02121c",surface:"#071b28",panel:"#10273b",text:"#e9fbff",chatText:"#d0ebff",accent:"#4dd0f6"}},sunset:{name:"Sunset Neon",colors:{background:"#13030c",surface:"#1b0813",panel:"#26101d",text:"#ffe7f1",chatText:"#ffcade",accent:"#ff6b9d"}},ember:{name:"Ember Forge",colors:{background:"#110802",surface:"#190d05",panel:"#24140a",text:"#fbe3c9",chatText:"#f6cea3",accent:"#ff914d"}}};const CRITICAL_FONT_WEIGHTS = ["400","600"];const GOOGLE_FONT_WEIGHT_QUERY = CRITICAL_FONT_WEIGHTS.join(";");const FONT_PRESETS ={inter:{name:"Inter",family:"'Inter','Segoe UI',sans-serif",google:`Inter:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},roboto:{name:"Roboto",family:"'Roboto','Segoe UI',sans-serif",google:`Roboto:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},poppins:{name:"Poppins",family:"'Poppins','Segoe UI',sans-serif",google:`Poppins:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},montserrat:{name:"Montserrat",family:"'Montserrat','Segoe UI',sans-serif",google:`Montserrat:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},opensans:{name:"Open Sans",family:"'Open Sans','Segoe UI',sans-serif",google:`Open+Sans:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},lato:{name:"Lato",family:"'Lato','Segoe UI',sans-serif",google:`Lato:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},nunito:{name:"Nunito",family:"'Nunito','Segoe UI',sans-serif",google:`Nunito:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},manrope:{name:"Manrope",family:"'Manrope','Segoe UI',sans-serif",google:`Manrope:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},outfit:{name:"Outfit",family:"'Outfit','Segoe UI',sans-serif",google:`Outfit:wght@${GOOGLE_FONT_WEIGHT_QUERY}`},urbanist:{name:"Urbanist",family:"'Urbanist','Segoe UI',sans-serif",google:`Urbanist:wght@${GOOGLE_FONT_WEIGHT_QUERY}`}};const FONT_DEFAULT_ID = "inter";const FONT_FALLBACK_FAMILY = FONT_PRESETS[FONT_DEFAULT_ID].family;const THEME_FONT_LINK_ID = "btfw-theme-font";const THEME_FONT_PRELOAD_LINK_ID = `${THEME_FONT_LINK_ID}-preload`;const THEME_FONT_PREVIEW_LINK_ID = `${THEME_FONT_LINK_ID}-preview`;const PREVIEW_FONT_WEIGHTS = [...CRITICAL_FONT_WEIGHTS];const previewFontLoadCache = new Map();const previewStylesheetPromises = new Map();const STYLE_ID = "btfw-theme-admin-style";const MODULE_FIELD_MIN = 3;const MODULE_FIELD_MAX = 10;const MODULE_INPUT_SELECTOR = '[data-role="module-inputs"]';const LOADER_PATTERNS = [ /\/\*\s*BillTube[\s\S]*?loader[\s\S]*?\*\ /\/\/\s*BillTube[\s\S]*?loader/i,/https?:\/\/billtube\.github\.io\/BillTube3\ /billtube-fw\.js/i,/\(function\s*\(\s*(?:W\s*,\s*D|window\s*,\s*document)\s*\)\s*\{[\s\S]*?CDN_BASE/i,];function findLoaderStart(source){if (!source) return -1;for (const pattern of LOADER_PATTERNS){const match = pattern.exec(source);if (match){let index = match.index;if (pattern === LOADER_PATTERNS[2] || pattern === LOADER_PATTERNS[3]){const commentIndex = source.lastIndexOf(" BTFW.define("feature:themeSettings",[],async () =>{const $ = (s,r=document) => r.querySelector(s);const $$ = (s,r=document) => Array.from(r.querySelectorAll(s));const TS_KEYS ={chatTextPx:"btfw:chat:textSize",avatarsMode:"btfw:chat:avatars",emoteSize:"btfw:chat:emoteSize",gifAutoplay:"btfw:chat:gifAutoplay",chatJoinNotices:"btfw:chat:joinNotices",stackCompact:"btfw:stack:compact",localSubs:"btfw:video:localsubs",billcastEnabled:"btfw:billcast:enabled",layoutSide:"btfw:layout:chatSide"};const get = (k,d) =>{try{const v = localStorage.getItem(k);return v==null? d:v;}catch(_){return d;}};const set = (k,v) =>{try{localStorage.setItem(k,v);}catch(_){}};function applyChatTextPx(px){const wrap = $("#chatwrap");if (!wrap) return;const clamped = Math.min(Math.max(Number(px) || 14,10),20);wrap.style.setProperty("--btfw-chat-text",`${clamped}px`);}function applyEmoteSize(size){const px = size==="small"?100:size==="big"?170:130;document.documentElement.style.setProperty("--btfw-emote-size",`${px}px`);document.dispatchEvent(new CustomEvent("btfw:chat:emoteSizeChanged",{detail:{size,px}}));}function applyCompactStack(enabled){const active = !!enabled;document.documentElement.classList.toggle("btfw-compact-stack",active);if (stackModule?.setCompactSpacing) stackModule.setCompactSpacing(active);else resolveStack().then(mod =>{if (mod?.setCompactSpacing) mod.setCompactSpacing(active);});}const moduleCache = new Map();function getModule(name){if (moduleCache.has(name)) return moduleCache.get(name);const promise = (window.BTFW && typeof BTFW.init === "function") ? BTFW.init(name).catch(()=>null):Promise.resolve(null);moduleCache.set(name,promise);return promise;}let avatarsModule = null;let stackModule = null;function resolveAvatars(){if (avatarsModule) return Promise.resolve(avatarsModule);return getModule("feature:chat-avatars").then(mod =>{if (mod) avatarsModule = mod;if (avatarsModule) return avatarsModule;return getModule("feature:chatAvatars").then(alt =>{if (alt) avatarsModule = alt;return avatarsModule;});});}resolveAvatars();function resolveStack(){if (stackModule) return Promise.resolve(stackModule);return getModule("feature:stack").then(mod =>{if (mod) stackModule = mod;return stackModule;});}resolveStack();function ensureModal(){let m = $("#btfw-theme-modal");if (m) return m;["#themesettings","#themeSettingsModal",".themesettings"].forEach(sel=> $$(sel).forEach(el=>el.remove()));m = document.createElement("div");m.id = "btfw-theme-modal";m.className = "modal";m.innerHTML = ` <div class="modal-background"></div> <div class="modal-card btfw-theme-modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Theme Settings</p> <button class="delete" aria-label="close"></button> </header> <section class="modal-card-body"> <div class="tabs btfw-ts-tabs is-small" id="btfw-ts-tabs"> <ul> <li class="is-active" data-tab="general"><a>General</a></li> <li data-tab="chat"><a>Chat</a></li> <li data-tab="video"><a>Video</a></li> </ul> </div> <div id="btfw-ts-panels"> <!-- General --> <div class="btfw-ts-panel" data-tab="general" style="display:block;"> <div class="btfw-ts-grid"> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Stack layout</h3> <p>Give desktop stack modules a little more breathing room.</p> </header> <div class="btfw-ts-card__body"> <button type="button" class="btfw-compact-stack-btn" id="btfw-compact-stack-toggle" aria-pressed="true"> <span class="btfw-compact-stack-label">Compact stack</span> <span class="btfw-compact-stack-status">On</span> </button> <p class="btfw-help">Adds horizontal padding around <code>.btfw-stack-list</code> items whenever the desktop grid is active.</p> </div> </section> </div> </div> <!-- Chat --> <div class="btfw-ts-panel" data-tab="chat" style="display:none;"> <div class="btfw-ts-grid"> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Avatars & text</h3> <p>Adjust density and readability for the chat column.</p> </header> <div class="btfw-ts-card__body"> <div class="btfw-ts-control"> <label class="btfw-input__label" for="btfw-avatars-mode">Avatar size</label> <div class="select is-small"> <select id="btfw-avatars-mode"> <option value="off">Off</option> <option value="small">Small</option> <option value="big">Big</option> </select> </div> </div> <div class="btfw-ts-control"> <span class="btfw-input__label">Chat text size</span> <div class="control btfw-range-control"> <input type="range" id="btfw-chat-textsize" min="10" max="20" step="1"> <span class="btfw-range-value" id="btfw-chat-textsize-value">14px</span> </div> <p class="btfw-help">Set chat typography anywhere between 10&nbsp;px and 20&nbsp;px.</p> </div> </div> </section> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Media</h3> <p>Control sticker and GIF behaviour for the chat experience.</p> </header> <div class="btfw-ts-card__body"> <div class="btfw-ts-control"> <label class="btfw-input__label" for="btfw-emote-size">Emote & GIF size</label> <div class="select is-small"> <select id="btfw-emote-size"> <option value="small">Small (100×100)</option> <option value="medium">Medium (130×130)</option> <option value="big">Big (170×170)</option> </select> </div> <p class="btfw-help">Applies to elements with <code>.channel-emote</code> and the GIF picker.</p> </div> <label class="checkbox btfw-checkbox"> <input type="checkbox" id="btfw-gif-autoplay"> <span>Autoplay GIFs in chat (otherwise play on hover)</span> </label> </div> </section> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Notifications</h3> <p>Decide which chat popups show up for you.</p> </header> <div class="btfw-ts-card__body"> <label class="checkbox btfw-checkbox"> <input type="checkbox" id="btfw-chat-join-notices"> <span>Show notifications when users join</span> </label> <p class="btfw-help">Affects the “Joined” popups triggered by users entering the channel.</p> </div> </section> </div> </div> <!-- Video --> <div class="btfw-ts-panel" data-tab="video" style="display:none;"> <div class="btfw-ts-grid"> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Layout</h3> <p>Choose how the desktop layout positions chat and video.</p> </header> <div class="btfw-ts-card__body"> <div class="btfw-ts-control"> <label class="btfw-input__label" for="btfw-chat-side">Layout mode</label> <div class="select is-small"> <select id="btfw-chat-side"> <option value="right">Video left,chat right</option> <option value="left">Chat left,video right</option> </select> </div> </div> <p class="btfw-help">Mobile screens automatically collapse into a stacked layout.</p> </div> </section> <section class="btfw-ts-card"> <header class="btfw-ts-card__header"> <h3>Playback tools</h3> <p>Toggle experimental features for the HTML5 player.</p> </header> <div class="btfw-ts-card__body"> <label class="checkbox btfw-checkbox"> <input type="checkbox" id="btfw-billcast-toggle" checked> <span>Enable Billcast (Chromecast sender)</span> </label> <label class="checkbox btfw-checkbox"> <input type="checkbox" id="btfw-localsubs-toggle"> <span>Show the “Local Subtitles” button</span> </label> <p class="btfw-help">Allows viewers to load local <code>.vtt</code> or <code>.srt</code> caption files.</p> </div> </section> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-link" id="btfw-ts-apply">Apply</button> <button class="button" id="btfw-ts-close">Close</button> </footer> </div> `;document.body.appendChild(m);$(".modal-background",m).addEventListener("click",close);$(".delete",m).addEventListener("click",close);$("#btfw-ts-close",m).addEventListener("click",close);$("#btfw-ts-tabs ul",m).addEventListener("click",(e)=>{const li = e.target.closest("li[data-tab]");if (!li) return;$$("#btfw-ts-tabs li",m).forEach(x => x.classList.toggle("is-active",x===li));const tab = li.getAttribute("data-tab");$$("#btfw-ts-panels .btfw-ts-panel",m).forEach(p => p.style.display = (p.dataset.tab===tab) ? "block":"none");});$("#btfw-ts-apply",m).addEventListener("click",applyAndPersist);const chatTextSlider = $("#btfw-chat-textsize",m);const chatTextValue = $("#btfw-chat-textsize-value",m);if (chatTextSlider && chatTextValue){const updateLabel = (val) =>{chatTextValue.textContent = `${val}px`;};chatTextSlider.addEventListener("input",() => updateLabel(chatTextSlider.value || "14"));updateLabel(chatTextSlider.value || "14");}const compactBtn = $("#btfw-compact-stack-toggle",m);if (compactBtn && !compactBtn._btfwSync){const status = compactBtn.querySelector(".btfw-compact-stack-status");const sync = (state) =>{const on = !!state;compactBtn.setAttribute("aria-pressed",on ? "true":"false");compactBtn.classList.toggle("is-active",on);if (status) status.textContent = on ? "On":"Off";compactBtn.dataset.state = on ? "on":"off";};compactBtn.addEventListener("click",(ev) =>{ev.preventDefault();const next = compactBtn.getAttribute("aria-pressed") !== "true";sync(next);});compactBtn._btfwSync = sync;}document.addEventListener("btfw:openThemeSettings",open);return m;}function applyAndPersist(){const m = $("#btfw-theme-modal");if (!m) return;const avatarsMode = $("#btfw-avatars-mode",m)?.value || "big";const chatTextPx = $("#btfw-chat-textsize",m)?.value || "14";const emoteSize = $("#btfw-emote-size",m)?.value || "medium";const gifAutoOn = $("#btfw-gif-autoplay",m)?.checked;const joinNoticesOn = $("#btfw-chat-join-notices",m)?.checked;const compactBtn = $("#btfw-compact-stack-toggle",m);const compactOn = compactBtn ? compactBtn.getAttribute("aria-pressed") === "true":true;const localSubsOn = $("#btfw-localsubs-toggle",m)?.checked;const billcastOn = $("#btfw-billcast-toggle",m)?.checked;const chatSide = $("#btfw-chat-side",m)?.value || "right";set(TS_KEYS.avatarsMode,avatarsMode);set(TS_KEYS.chatTextPx,chatTextPx);set(TS_KEYS.emoteSize,emoteSize);set(TS_KEYS.gifAutoplay,gifAutoOn ? "1":"0");set(TS_KEYS.chatJoinNotices,joinNoticesOn ? "1":"0");set(TS_KEYS.stackCompact,compactOn ? "1":"0");set(TS_KEYS.localSubs,localSubsOn ? "1":"0");set(TS_KEYS.billcastEnabled,billcastOn ? "1":"0");set(TS_KEYS.layoutSide,chatSide);if (avatarsModule?.setMode) avatarsModule.setMode(avatarsMode);else resolveAvatars().then(mod =>{if (mod?.setMode) mod.setMode(avatarsMode);});applyChatTextPx(parseInt(chatTextPx,10));applyEmoteSize(emoteSize);applyCompactStack(compactOn);document.dispatchEvent(new CustomEvent("btfw:chat:gifAutoplayChanged",{detail:{autoplay:!!gifAutoOn}}));document.dispatchEvent(new CustomEvent("btfw:chat:joinNoticesChanged",{detail:{enabled:!!joinNoticesOn}}));document.dispatchEvent(new CustomEvent("btfw:stack:compactChanged",{detail:{enabled:!!compactOn}}));document.dispatchEvent(new CustomEvent("btfw:video:localsubs:changed",{detail:{enabled:!!localSubsOn}}));document.dispatchEvent(new CustomEvent("btfw:layout:chatSideChanged",{detail:{side:chatSide}}));document.dispatchEvent(new CustomEvent("btfw:themeSettings:apply",{detail:{values:{avatarsMode,chatTextPx:parseInt(chatTextPx,10),emoteSize,gifAutoplay:!!gifAutoOn,compactStack:!!compactOn,localSubs:!!localSubsOn,billcastEnabled:!!billcastOn,joinNotices:!!joinNoticesOn,chatSide}}}));}function open(){const m = ensureModal();const avatarSelect = $("#btfw-avatars-mode",m);const storedAv = get(TS_KEYS.avatarsMode,"big");const avNow = avatarsModule?.getMode ? avatarsModule.getMode():storedAv;if (avatarSelect){avatarSelect.value = ["off","small","big"].includes(avNow) ? avNow:"big";}resolveAvatars().then(mod =>{if (mod?.getMode && avatarSelect){const live = mod.getMode();avatarSelect.value = ["off","small","big"].includes(live) ? live:avatarSelect.value;}});const chatPxNow = get(TS_KEYS.chatTextPx,"14");const chatSlider = $("#btfw-chat-textsize");if (chatSlider) chatSlider.value = chatPxNow;const chatLabel = $("#btfw-chat-textsize-value");if (chatLabel) chatLabel.textContent = `${chatPxNow}px`;$("#btfw-emote-size").value = get(TS_KEYS.emoteSize,"medium");$("#btfw-gif-autoplay").checked = get(TS_KEYS.gifAutoplay,"1") === "1";$("#btfw-chat-join-notices").checked = get(TS_KEYS.chatJoinNotices,"1") === "1";$("#btfw-localsubs-toggle").checked = get(TS_KEYS.localSubs,"1") === "1";const bc = $("#btfw-billcast-toggle");if (bc) bc.checked = get(TS_KEYS.billcastEnabled,"1") === "1";const compactStored = get(TS_KEYS.stackCompact,"1") === "1";const compactBtn = $("#btfw-compact-stack-toggle",m);if (compactBtn?._btfwSync) compactBtn._btfwSync(compactStored);else if (compactBtn){compactBtn.setAttribute("aria-pressed",compactStored ? "true":"false");const status = compactBtn.querySelector(".btfw-compact-stack-status");if (status) status.textContent = compactStored ? "On":"Off";}const layoutSelect = $("#btfw-chat-side",m);const sideNow = get(TS_KEYS.layoutSide,"right");if (layoutSelect) layoutSelect.value = ["left","right"].includes(sideNow) ? sideNow:"right";m.classList.add("is-active");document.dispatchEvent(new CustomEvent("btfw:themeSettings:open"));}function close(){$("#btfw-theme-modal")?.classList.remove("is-active");}const OPEN_SELECTOR = "#btfw-theme-btn-chat,#btfw-theme-btn-nav,.btfw-theme-open";let delegatedOpeners = false;function wireOpeners(){if (delegatedOpeners) return;delegatedOpeners = true;document.addEventListener("click",(event)=>{const trigger = event.target?.closest?.(OPEN_SELECTOR);if (!trigger) return;event.preventDefault();open();});}function decorateUserOptions(modal = document.getElementById("useroptions")){if (!modal) return;const pane = modal.querySelector("#us-general");if (pane && !pane._btfwDecorated){pane._btfwDecorated = true;pane.classList.add("btfw-useroptions-pane");const headers = Array.from(pane.querySelectorAll('h3,h4,.section-header,legend'));headers.forEach(header =>{const text = header.textContent.toLowerCase();if (text.includes('general preferences')){header.style.display = 'none';}});const paragraphs = Array.from(pane.querySelectorAll('p,.help-block,.text-muted'));paragraphs.forEach(p =>{const text = p.textContent.toLowerCase();if (text.includes('changing layouts') || text.includes('require refreshing')){p.style.display = 'none';}});const controlsById = [ '#us-theme','#us-layout','#us-no-channelcss','#us-no-channeljs' ];controlsById.forEach(id =>{const element = pane.querySelector(id);if (element){const formGroup = element.closest('.form-group,.control-group,.checkbox,label,div');if (formGroup){formGroup.style.display = 'none';}}});const labels = Array.from(pane.querySelectorAll('label'));labels.forEach(label =>{const text = label.textContent.toLowerCase();if (text.includes('theme') || text.includes('layout') || text.includes('ignore channel css') || text.includes('ignore channel javascript')){label.style.display = 'none';const formGroup = label.closest('.form-group,.control-group,.checkbox,div');if (formGroup){formGroup.style.display = 'none';}}});const checkboxes = Array.from(pane.querySelectorAll('input[type="checkbox"]'));checkboxes.forEach(checkbox =>{const name = checkbox.name || checkbox.id || '';if (name.includes('channelcss') || name.includes('channeljs')){const container = checkbox.closest('.form-group,.control-group,.checkbox,label,div');if (container){container.style.display = 'none';}}});const selects = Array.from(pane.querySelectorAll('select'));selects.forEach(select =>{const name = select.name || select.id || '';if (name.includes('theme') || name.includes('layout')){const container = select.closest('.form-group,.control-group,div');if (container){container.style.display = 'none';}}});const customSection = document.createElement('div');customSection.className = 'btfw-useroptions-about';customSection.innerHTML = ` <div class="btfw-useroptions-hero"> <span class="btfw-useroptions-badge">BillTube3</span> <h4>Made by Bill</h4> <p>BillTube3 keeps the entire channel aligned with a unified visual language. Theme and layout settings are managed by the channel to ensure a consistent experience.</p> </div> <div class="btfw-useroptions-panels"> <article class="btfw-useroptions-panel"> <h5>New features!</h5> <p>Native mobile theme,dynamic chromecast support,Tenor and Giphy for more emote variety.</p> </article> <article class="btfw-useroptions-panel"> <h5>Need a tweak?</h5> <p>Share feedback in chat or ping Bill directly on Discord. Adjustments roll out globally after testing in the Channel Theme Toolkit.</p> </article> </div> `;pane.insertBefore(customSection,pane.firstChild);}}let userOptionsBound = false;function bindUserOptions(){if (userOptionsBound) return;userOptionsBound = true;document.addEventListener("show.bs.modal",(event)=>{const modal = event?.target?.closest?.("#useroptions") || (event?.target?.id === "useroptions" ? event.target:null);if (modal) decorateUserOptions(modal);},true);}function boot(){applyChatTextPx(parseInt(get(TS_KEYS.chatTextPx,"14"),10));applyEmoteSize(get(TS_KEYS.emoteSize,"medium"));applyCompactStack(get(TS_KEYS.stackCompact,"1") === "1");wireOpeners();decorateUserOptions();bindUserOptions();}if (document.readyState === "loading") document.addEventListener("DOMContentLoaded",boot);else boot();return{name:"feature:themeSettings",open,close,wireOpeners};});BTFW.define("feature:motd-editor",[],async () =>{const $ = (s,r=document)=>r.querySelector(s);const $$ = (s,r=document)=>Array.from(r.querySelectorAll(s));const QUILL_CSS = "https:const QUILL_JS = "https:function loadOnce(href,rel="stylesheet"){return new Promise((res,rej)=>{if (rel === "stylesheet" && $$(`link[href="${href}"]`).length) return res();if (rel === "script" && $$(`script[src="${href}"]`).length) return res();const el = document.createElement(rel==="script"?"script":"link");if (rel==="script"){el.src = href;el.async = true;el.onload = res;el.onerror = rej;}else{el.rel="stylesheet";el.href = href;el.onload = res;el.onerror = rej;}document.head.appendChild(el);});}function canEditMotd(){try{if (typeof window.hasPermission === "function"){if (window.hasPermission("motdedit") || window.hasPermission("editMotd") || window.hasPermission("motd")){return true;}}const client = window.CLIENT || null;if (client?.hasPermission){if (client.hasPermission("motdedit") || client.hasPermission("editMotd") || client.hasPermission("motd")){return true;}}if (client && typeof client.rank !== "undefined"){const rank = client.rank|0;const ranks = window.RANK || window.Ranks ||{};const thresholds = [ranks.moderator,ranks.mod,ranks.admin,ranks.administrator];const needed = thresholds.find(v => typeof v === "number");if (typeof needed === "number") return rank >= needed;return rank >= 2;}}catch(_){}return false;}function getMotdContent(){const csMotd = $("#cs-motdtext");if (csMotd && csMotd.value && csMotd.value.trim()){console.log('[motd-editor] Content from #cs-motdtext:',csMotd.value.length);return csMotd.value;}const motdDisplay = $("#motd");if (motdDisplay && motdDisplay.innerHTML && motdDisplay.innerHTML.trim()){console.log('[motd-editor] Content from #motd:',motdDisplay.innerHTML.length);return motdDisplay.innerHTML;}const motdWrap = $("#motdwrap");if (motdWrap && motdWrap.innerHTML && motdWrap.innerHTML.trim()){console.log('[motd-editor] Content from #motdwrap:',motdWrap.innerHTML.length);return motdWrap.innerHTML;}console.log('[motd-editor] No MOTD content found');return "";}function buildModal(){const existing = $("#btfw-motd-modal");if (existing) existing.remove();const m = document.createElement("div");m.id = "btfw-motd-modal";m.className = "modal";m.innerHTML = ` <div class="modal-background"></div> <div class="modal-card btfw-modal"> <header class="modal-card-head"> <p class="modal-card-title">Edit MOTD</p> <button class="delete" aria-label="close"></button> </header> <section class="modal-card-body"> <div id="btfw-motd-editor" style="height:320px;"></div> </section> <footer class="modal-card-foot"> <button class="button is-link" id="btfw-motd-save">Save</button> <button class="button" id="btfw-motd-cancel">Cancel</button> </footer> </div>`;document.body.appendChild(m);$(".modal-background",m).addEventListener("click",()=> m.classList.remove("is-active"));$(".delete",m).addEventListener("click",()=> m.classList.remove("is-active"));$("#btfw-motd-cancel",m).addEventListener("click",()=> m.classList.remove("is-active"));return m;}let quill = null;async function openEditor(){if (quill){try{quill.disable();}catch(_){}quill = null;}const initialHTML = getMotdContent();const m = buildModal();try{await loadOnce(QUILL_CSS,"stylesheet");await loadOnce(QUILL_JS,"script");}catch(e){console.warn("[motd-editor] Quill load failed",e);const host = $("#btfw-motd-editor",m);if (host){host.innerHTML = `<textarea class="textarea" style="height:100%;font-family:monospace;">${initialHTML}</textarea>`;}m.classList.add("is-active");return;}const host = $("#btfw-motd-editor",m);if (!host){console.error('[motd-editor] Editor host not found');return;}if (window.Quill){quill = new Quill(host,{theme:"snow",modules:{toolbar:[ [{'header':[1,2,3,4,5,6,false]}],[{'font':[]}],[{'size':['small',false,'large','huge']}],["bold","italic","underline","strike"],[{'color':[]},{'background':[]}],[{'script':'sub'},{'script':'super'}],["blockquote","code-block"],[{'list':'ordered'},{'list':'bullet'},{'indent':'-1'},{'indent':'+1'}],[{'align':[]}],["link","image","video"],["clean"] ]}});if (initialHTML && initialHTML.trim()){try{quill.clipboard.dangerouslyPasteHTML(initialHTML);console.log('[motd-editor] Content loaded via clipboard API');}catch(e){console.warn('[motd-editor] Clipboard paste failed,trying delta conversion',e);try{const delta = quill.clipboard.convert(initialHTML);quill.setContents(delta);console.log('[motd-editor] Content loaded via delta conversion');}catch(e2){console.error('[motd-editor] Both methods failed',e2);quill.setText(initialHTML);}}}console.log('[motd-editor] Quill editor ready,content loaded');}else{host.innerHTML = `<div id="btfw-motd-fallback" contenteditable="true" class="box" style="height:100%;overflow:auto;">${initialHTML}</div>`;}const saveBtn = $("#btfw-motd-save",m);if (saveBtn){saveBtn.onclick = ()=>{const html = quill ? quill.root.innerHTML:$("#btfw-motd-fallback")?.innerHTML || "";console.log('[motd-editor] Saving MOTD,length:',html.length);try{if (window.socket?.emit){socket.emit("setMotd",{motd:html});console.log('[motd-editor] Emitted setMotd to server');}}catch(e){console.warn("[motd-editor] setMotd emit failed",e);}const motdDisplay = $("#motd");if (motdDisplay) motdDisplay.innerHTML = html;const csMotd = $("#cs-motdtext");if (csMotd) csMotd.value = html;m.classList.remove("is-active");};}m.classList.add("is-active");}function injectButton(){const existingBtn = document.getElementById("btfw-motd-editbtn");const existingRow = existingBtn ? existingBtn.closest(".btfw-motd-editrow"):null;if (!canEditMotd()){if (existingRow) existingRow.remove();return;}const motdWrap = $("#motdwrap") || $("#motd")?.closest(".well") || $("#btfw-leftpad");const host = motdWrap?.parentNode;if (!motdWrap || !host) return;let row = existingRow;if (!row){row = document.createElement("div");row.innerHTML = `<button id="btfw-motd-editbtn" class="button is-small is-link"><i class="fa fa-pencil"></i> Edit MOTD</button>`;}row.classList.add("buttons","is-right","btfw-motd-editrow");if (!row.querySelector("#btfw-motd-editbtn")){const btn = document.createElement("button");btn.id = "btfw-motd-editbtn";btn.className = "button is-small is-link";btn.innerHTML = `<i class="fa fa-pencil"></i> Edit MOTD`;row.appendChild(btn);}if (row.parentNode !== host || row.previousElementSibling !== motdWrap){host.insertBefore(row,motdWrap.nextSibling);}const btn = row.querySelector("#btfw-motd-editbtn");if (btn && !btn._btfwMotdBound){btn._btfwMotdBound = true;btn.addEventListener("click",openEditor);}}function boot(){injectButton();const mo = new MutationObserver(()=> injectButton());mo.observe(document.body,{childList:true,subtree:true});}if (document.readyState === "loading") document.addEventListener("DOMContentLoaded",boot);else boot();return{name:"feature:motd-editor",openEditor};});